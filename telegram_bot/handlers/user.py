from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from database.db_sqlite3 import db_insert
from telegram_bot.keyboards.reply import ready, main_menu


class FSMCharacter(StatesGroup):
    name = State()
    race = State()
    clas = State()
    origin = State()
    level = State()


async def create_character(message: types.Message, state=FSMContext):
    await FSMCharacter.name.set()
    async with state.proxy() as data:
        data['user_id'] = int(message.from_user.id)
    await message.reply('–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–µ–±—è, –ø—É—Ç–Ω–∏–∫?')


async def set_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMCharacter.next()
    await message.reply(f'–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è - {data["name"]}, '
                        f'–æ –∫–æ–º –±–∞—Ä–¥—ã –±—É–¥—É—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–µ—Å–Ω–∏. –ê –∫–∞–∫–∏–µ –ø–µ—Å–Ω–∏, —Ä–µ—à–∞—Ç—å —É–∂–µ —Ç–µ–±–µ!\n–í—ã–±–µ—Ä–∏ —Ä–∞—Å—É –±—É–¥—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')


async def set_race(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['race'] = message.text
    await FSMCharacter.next()
    await message.reply(f'{data["race"]} - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π –∫–ª–∞—Å—Å —Ç—ã –≤—ã–±—Ä–∞–ª –¥–ª—è —Å–≤–æ–∏—Ö —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏–π')


async def set_clas(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['clas'] = message.text
    await FSMCharacter.next()
    await message.reply(f'–•–º–º, {data["clas"]}... –£ –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç–æ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è? –ü–æ–≤–µ–¥–∞–π –µ–µ –∏–ª–∏ –∂–µ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∫–∞–∑–∞–Ω–∏–π')


async def set_origin(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['origin'] = message.text
    await FSMCharacter.next()
    await message.reply(f'–ò—Å—Ç–æ—Ä–∏—è –æ—Ç {data["origin"]} —è –µ—â–µ –Ω–µ —Å–ª—ã—Ö–∞–ª. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ç—ã —Å–º–æ–≥ –¥–æ—Å—Ç–∏—á—å?')


async def set_level(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['level'] = int(message.text)

    #–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await db_insert(state)
    await state.finish()

    await message.answer(f'–î–∞–π-–∫–∞ –∑–∞–ø–∏—à—É –æ —Ç–µ–±–µ –≤ —Å–≤–æ–µ–º –±–ª–æ–∫–Ω–æ—Ç–µ\n\n-------------------\n'
                                       f'üîÖ –ü–µ—Ä—Å–æ–Ω–∞–∂: {data["name"]} (—É—Ä–æ–≤–µ–Ω—å: {data["level"]})\n'
        f'üßë‚Äçü¶≥ –†–∞—Å–∞: {data["race"]}\nüßô –ö–ª–∞—Å—Å: {data["clas"]}\nüëº –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {data["origin"]}\n-------------------\n'
        f'\n–ü—Ä–æ–≤–µ—Ä—å –º–µ–Ω—è, —è –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å–ª—ã—à–∞–ª?')



async def user_welcome(message: types.Message):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D&VENTURES! " \
           "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ? " \
           "–ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â–µ –±–æ–ª–µ–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º!\n–ì–æ—Ç–æ–≤ –∫ –±–æ—é?"
    await message.answer(text, reply_markup=ready)


async def user_main_menu(message: types.Message):
    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü! –ü—Ä–∏—Å—è–¥—å, –≤—ã–ø–µ–π –±—Ä–µ–Ω–¥–∏ –Ω–∞ –¥–æ—Ä–æ–∂–∫—É –∏ –ø–æ–≤–µ–¥–∞–π –º–Ω–µ –∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–≤? " \
           "–ï–∂–µ–ª–∏ —Ç–≤–æ—è –≤–æ–ª—à–µ–±–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Ç–æ —Å–æ–≤–µ—Ç—É—é –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –¥—Ä–µ–≤–Ω–∏–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫" \
           " ‚Äì –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º –∏ –ø–æ–≤–µ–¥–∞–µ—Ç —Ç–µ–±–µ –æ–±–æ –≤—Å–µ–º –Ω–∞ —Å–≤–µ—Ç–µ."
    await message.answer(text, reply_markup=main_menu)


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_welcome, commands=['start'])
    dp.register_message_handler(user_main_menu, Text(equals='–í –±–æ–π! üèπ', ignore_case=True), state='*')
    dp.register_message_handler(create_character, Text(equals='–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üìÆ', ignore_case=True), state=None)
    dp.register_message_handler(set_name, state=FSMCharacter.name)
    dp.register_message_handler(set_race, state=FSMCharacter.race)
    dp.register_message_handler(set_clas, state=FSMCharacter.clas)
    dp.register_message_handler(set_origin, state=FSMCharacter.origin)
    dp.register_message_handler(set_level, state=FSMCharacter.level)
