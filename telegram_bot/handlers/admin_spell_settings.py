import time

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

from database.db_processing.spell_create import new_spell
from telegram_bot.keyboards.callback_datas import spell_class_callback, confirmation_callback
from telegram_bot.keyboards.inline_keyboards.spell_class_keyboard import spell_class
from telegram_bot.keyboards.reply import main_menu


class FSMSpell(StatesGroup):
    spell_name = State()
    spell_level = State()
    spell_description = State()
    spell_classes = State()


async def start_spell_creation(message: types.Message, state=FSMContext):
    await FSMSpell.spell_name.set()
    await message.answer(
        f'ü™Ñ –°–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Ç–æ, –∫–∞–∫ –≤–µ–ª–∏–∫–∏–µ —á–∞—Ä–æ–¥–µ–∏ –±—É–¥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–≤–æ—ë –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, _–ü–∏–≤–æ—Å–º–µ—Ä—á_', parse_mode="Markdown")


async def spell_add_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMSpell.next()
    await message.answer(f'ü™Ñ –°–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n\n`{data["name"].upper()}`\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Ç–≤–æ–µ –≤–µ–ª–∏–∫–æ–µ'
                         f' –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –æ–±—ã—á–Ω–æ–º—É —Å–º–µ—Ä—Ç–Ω–æ–º—É', parse_mode="Markdown")


async def spell_add_level(message: types.Message, state=FSMContext):
    try:
        if int(message.text) < 0:
            await message.reply("–û–≥–æ! –ì–¥–µ —ç—Ç–æ –≤–∏–¥–∞–Ω–æ, –≥–¥–µ —ç—Ç–æ —Å–ª—ã—Ö–∞–Ω–æ, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å —Ç–∞–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±–∞–ª–±–µ—Å!")
            return
        if int(message.text) > 20:
            await message.reply(
                "–≠—Ç–æ —è —á—Ç–æ?! –î–æ–ª–∂–µ–Ω –∏–≥—Ä 1000 —Å—ã–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? –£ –º–µ–Ω—è –≤–æ–æ–±—â–µ-—Ç–æ –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å –µ—â–µ –µ—Å—Ç—å!")
            return

        async with state.proxy() as data:
            data['level'] = int(message.text)
        await FSMSpell.next()
        await message.answer(
            f'ü™Ñ –°–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n\n`{data["name"].upper()}`\n{data["level"]}-–π —É—Ä–æ–≤–µ–Ω—å\n\n–Ø –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤—É—é, –∫–∞–∫ —ç—Ç–æ—Ç'
            f'–º–∏—Ä —É–∂–µ —Ç—Ä–µ–ø–µ—â–µ—Ç –ø–µ—Ä–µ–¥ —Ç–≤–æ–∏–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º! –î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –æ–ø–∏—à–µ–º, –≤ —á–µ–º –µ–≥–æ —Å–∏–ª–∞!', parse_mode="Markdown")
    except Exception as err:
        await message.reply("–ß—Ç–æ-—Ç–æ —Ç—É—Ç –Ω–µ —Ç–∞–∫... –Ø –¥—É–º–∞–ª —Ç—É—Ç –Ω—É–∂–Ω–æ –±—ã–ª–æ —á–∏—Å–ª–æ –≤–≤–æ–¥–∏—Ç—å...")
        print(err)


async def spell_add_description(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
        data['classes'] = ""
        data['class'] = []
    await FSMSpell.next()
    await message.answer(f'ü™Ñ–°–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n\n`{data["name"].upper()}`\n{data["level"]}-–π —É—Ä–æ–≤–µ–Ω—å\n\n{data["description"]}\n\n'
                         f'–í–æ—Ç —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', reply_markup=spell_class, parse_mode="Markdown")


async def spell_add_class(call: types.CallbackQuery, callback_data: dict, state=FSMContext):
    await call.answer()
    async with state.proxy() as data:
        text: str = data["classes"]
        class_list: list = data["class"]
        if callback_data.get("name") in text:
            text = text.replace(f'{callback_data.get("name")}', '')
            class_list.remove(callback_data.get("clas"))
        else:
            text = text + callback_data.get("name")
            class_list.append(callback_data.get("clas"))
        data["classes"] = text
    await call.message.edit_text(f'ü™Ñ–°–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n\n`{data["name"].upper()}`\n{data["level"]}-–π —É—Ä–æ–≤–µ–Ω—å, –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ {text[:-2]}\n\n{data["description"]}\n\n'
                         f'–í–æ—Ç —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', reply_markup=spell_class, parse_mode="Markdown")


async def spell_save(call: types.CallbackQuery, callback_data: dict, state=FSMContext):
    await call.answer()
    await call.message.edit_reply_markup(reply_markup=None)
    async with state.proxy() as data:
        name: str = data["name"]
        level: int = data["level"]
        clas: str = data["classes"][:-2]
        text: str = data["description"]
        classes: list = data["class"]
    await call.message.edit_text(f'ü™Ñ–°–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n\n–°—Ç–∞–Ω—É –±–ª–∞–≥–æ—Å–ª–æ–≤—è—Å—å, –ø–æ–π–¥—É –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç—è—Å—å, –∏–∑ –∏–∑–±—ã –¥–≤–µ—Ä—å–º–∏, '
                                 f'–∏–∑ –≤–æ—Ä–æ—Ç –≤–æ—Ä–æ—Ç–∞–º–∏, –Ω–∞ —à–∏—Ä–æ–∫–∏–π –¥–≤–æ—Ä, –≤ —á–∏—Å—Ç–æ –ø–æ–ª–µ *–ü–£–§*\n\n –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!', parse_mode="Markdown")
    time.sleep(3)
    await call.message.edit_text(f'`{name.upper()}`\n{str(level)}-–π —É—Ä–æ–≤–µ–Ω—å, –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ {clas}\n\n{text}', parse_mode="Markdown")
    await state.finish()
    new_spell(name, level, classes, text)


def register_admin_spell_settings(dp: Dispatcher):
    dp.register_message_handler(start_spell_creation, Text(equals='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ', ignore_case=True),
                                is_admin=True, state='*')
    dp.register_message_handler(spell_add_name, is_admin=True, state=FSMSpell.spell_name)
    dp.register_message_handler(spell_add_level, is_admin=True, state=FSMSpell.spell_level)
    dp.register_message_handler(spell_add_description, is_admin=True, state=FSMSpell.spell_description)
    dp.register_callback_query_handler(spell_add_class, spell_class_callback.filter(turn="off"), is_admin=True, state=FSMSpell.spell_classes)
    dp.register_callback_query_handler(spell_save, confirmation_callback.filter(choice="yes"), is_admin=True,
                                       state=FSMSpell.spell_classes)
