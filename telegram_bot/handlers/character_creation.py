from aiogram.types import CallbackQuery

from database.db_sqlite3 import db_insert
from telegram_bot.keyboards.callback_datas import confirmation_callback
from telegram_bot.keyboards.inline import confirmation_menu
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from telegram_bot.keyboards.reply import blank, main_menu


class FSMCharacter(StatesGroup):
    name = State()
    race = State()
    clas = State()
    origin = State()
    level = State()
    confirmation = State()


async def create_character(message: types.Message, state=FSMContext):
    await FSMCharacter.name.set()
    async with state.proxy() as data:
        data['user_id'] = int(message.from_user.id)
    await message.reply('–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–µ–±—è, –ø—É—Ç–Ω–∏–∫?', reply_markup=blank)


async def set_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMCharacter.next()
    await message.reply(f'–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è - {data["name"]}, '
                        f'–æ –∫–æ–º –±–∞—Ä–¥—ã –±—É–¥—É—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–µ—Å–Ω–∏. –ê –∫–∞–∫–∏–µ –ø–µ—Å–Ω–∏, —Ä–µ—à–∞—Ç—å —É–∂–µ —Ç–µ–±–µ!\n–í—ã–±–µ—Ä–∏ —Ä–∞—Å—É –±—É–¥—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
                        reply_markup=blank)


async def set_race(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['race'] = message.text
    await FSMCharacter.next()
    await message.reply(f'{data["race"]} - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π –∫–ª–∞—Å—Å —Ç—ã –≤—ã–±—Ä–∞–ª –¥–ª—è —Å–≤–æ–∏—Ö —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏–π',
                        reply_markup=blank)


async def set_clas(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['clas'] = message.text
    await FSMCharacter.next()
    await message.reply(
        f'–•–º–º, {data["clas"]}... –£ –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç–æ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è? –ü–æ–≤–µ–¥–∞–π –µ–µ –∏–ª–∏ –∂–µ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∫–∞–∑–∞–Ω–∏–π',
        reply_markup=blank)


async def set_origin(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['origin'] = message.text
    await FSMCharacter.next()
    await message.reply(f'–ò—Å—Ç–æ—Ä–∏—è –æ—Ç {data["origin"]} —è –µ—â–µ –Ω–µ —Å–ª—ã—Ö–∞–ª. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ç—ã —Å–º–æ–≥ –¥–æ—Å—Ç–∏—á—å?',
                        reply_markup=blank)


async def set_level(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['level'] = int(message.text)
    await FSMCharacter.next()
    await message.answer(f'–î–∞–π-–∫–∞ –∑–∞–ø–∏—à—É –æ —Ç–µ–±–µ –≤ —Å–≤–æ–µ–º –±–ª–æ–∫–Ω–æ—Ç–µ\n\n-------------------\n'
                         f'üîÖ –ü–µ—Ä—Å–æ–Ω–∞–∂: {data["name"]} (—É—Ä–æ–≤–µ–Ω—å: {data["level"]})\n'
                         f'üßë‚Äçü¶≥ –†–∞—Å–∞: {data["race"]}\nüßô –ö–ª–∞—Å—Å: {data["clas"]}\nüëº –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {data["origin"]}\n-------------------\n'
                         f'\n–ü—Ä–æ–≤–µ—Ä—å –º–µ–Ω—è, —è –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å–ª—ã—à–∞–ª?', reply_markup=confirmation_menu)


async def save_character(call: types.CallbackQuery, state=FSMContext):
    await call.answer(cache_time=60)
    await db_insert(state)
    await state.finish()
    await call.message.answer("–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è –µ—é —Å–æ –º–Ω–æ–π!")
    await call.message.edit_reply_markup(reply_markup=None)


async def stop_creating_character(message: types.Message, state=FSMContext):
    await state.finish()
    await message.answer("–í–∏–¥–∏–º–æ —Å–µ–π—á–∞—Å —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤ —Å–æ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π... –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã"
                         " –ø–æ—Å–ª—É—à–∞—Ç—å –æ —Ç–≤–æ–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö!", reply_markup=main_menu)


def register_character_creation(dp: Dispatcher):
    dp.register_callback_query_handler(save_character, confirmation_callback.filter(choice="yes"),
                                       state=FSMCharacter.confirmation)
    dp.register_message_handler(create_character, Text(equals='–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', ignore_case=True), state=None)
    dp.register_message_handler(stop_creating_character, Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', ignore_case=True),
                                state=FSMCharacter.all_states)
    dp.register_message_handler(set_name, state=FSMCharacter.name)
    dp.register_message_handler(set_race, state=FSMCharacter.race)
    dp.register_message_handler(set_clas, state=FSMCharacter.clas)
    dp.register_message_handler(set_origin, state=FSMCharacter.origin)
    dp.register_message_handler(set_level, state=FSMCharacter.level)
