from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from database.db_sqlite3 import db_insert
from telegram_bot.keyboards.callback_datas import confirmation_callback, character_edit_callback, \
    character_creation_callback, page_button_callback
from telegram_bot.keyboards.inline import confirmation_menu, character_info, cancel_menu
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from telegram_bot.keyboards.reply import main_menu


class FSMCharacter(StatesGroup):
    name = State()
    race = State()
    clas = State()
    origin = State()
    level = State()
    confirmation = State()


races = ["–ê–∞—Ä–∞–∫–æ–∫—Ä–∞ ü™∂", "–ê–∞—Å–∏–º–∞—Ä üëº", "–ê–≤—Ç–æ–≥–Ω–æ–º ‚öôÔ∏è", "–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª—å—Ñ üîÆ", "–ë–∞–≥–±–∏—Ä üêª", "–í–µ–¥–∞–ª–∫–µ–Ω üßû", "–í–µ—Ä–¥–∞–Ω üë∫",
         "–ì–∏–±—Ä–∏–¥ –°–∏–º–∏–∫–æ–≤", "–ì–∏—Ç", "–ì–∏—Ñ—Ñ", "–ì–Ω–æ–º", "–ì–æ–±–ª–∏–Ω", "–ì–æ–ª–∏–∞—Ñ", "–ì—Ä—É–Ω–≥", "–î–≤–∞—Ä—Ñ", "–î–∂–µ–Ω–∞–∑–∏",
         "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π", "–ó–∞–π—Ü–µ–≥–æ–Ω", "–ö–∞–ª–∞—à—Ç–∞—Ä", "–ö–µ–Ω–¥–µ—Ä", "–ö–µ–Ω–∫—É", "–ö–µ–Ω—Ç–∞–≤—Ä", "–ö–æ–±–æ–ª—å–¥", "–ö–æ–≤–∞–Ω—ã–π",
         "–õ–µ–æ–Ω–∏–Ω–µ—Ü", "–õ–æ–∫–∞—Ç–∞", "–õ–æ–∫—Å–æ–¥–æ–Ω", "–õ—é–¥–æ—è—â–µ—Ä", "–ú–∏–Ω–æ—Ç–∞–≤—Ä", "–û—Ä–∫", "–ü–ª–∞–∑–º–æ–∏–¥", "–ü–æ–ª—É–æ—Ä–∫",
         "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", "–ü–æ–ª—É—ç–ª—å—Ñ", "–°–∞—Ç–∏—Ä", "–°–æ–≤–ª–∏–Ω", "–¢–∞–±–∞–∫—Å–∏", "–¢–∏—Ñ–ª–∏–Ω–≥", "–¢–æ—Ä—Ç–ª", "–¢—Ä–∏-–∫—Ä–∏–Ω", "–¢—Ä–∏—Ç–æ–Ω",
         "–§–µ–π—Ä–∏", "–§—Ä–∏–±–æ–ª–≥", "–•–∞–¥–æ–∑–∏", "–•–æ–±–≥–æ–±–ª–∏–Ω", "–ß–µ–π–Ω–¥–∂–æ–∏–Ω–≥", "–ß–µ–ª–æ–≤–µ–∫", "–®–∏—Ñ—Ç–µ—Ä", "–≠–ª—å—Ñ", "–Æ–∞–Ω—å-—Ç–∏"]

classes = ["–ë–∞—Ä–¥", "–í–∞—Ä–≤–∞—Ä", "–í–æ–∏–Ω", "–í–æ–ª—à–µ–±–Ω–∏–∫", "–î—Ä—É–∏–¥", "–ñ—Ä–µ—Ü", "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", "–ö–æ–ª–¥—É–Ω", "–ú–æ–Ω–∞—Ö",
           "–ü–∞–ª–∞–¥–∏–Ω", "–ü–ª—É—Ç", "–°–ª–µ–¥–æ–ø—ã—Ç", "–ß–∞—Ä–æ–¥–µ–π"]


async def create_character(message: types.Message, state=FSMContext):
    await FSMCharacter.name.set()
    async with state.proxy() as data:
        data['user_id'] = int(message.from_user.id)
    await message.reply('–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–µ–±—è, –ø—É—Ç–Ω–∏–∫?', reply_markup=cancel_menu)


async def set_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMCharacter.next()

    button_list = []
    for i in range(0, 6, 2):
        button_list.append([InlineKeyboardButton(text=races[i], callback_data=character_creation_callback.new(
            action="race", race=races[i][:-2], clas="null")), InlineKeyboardButton(text=races[i + 1],
                                                                                   callback_data=character_creation_callback.new(
                                                                                       action="race",
                                                                                       race=races[i + 1][:-2],
                                                                                       clas="null"))])

    markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=button_list)
    markup.add(
        InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page="1", action="prev")),
        InlineKeyboardButton(text="1", callback_data="null"),
        InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page="1", action="next")),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=confirmation_callback.new(choice="cancel"))
    )

    await message.reply(f'–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è - {data["name"]}, '
                        f'–æ –∫–æ–º –±–∞—Ä–¥—ã –±—É–¥—É—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø–µ—Å–Ω–∏. –ê –∫–∞–∫–∏–µ –ø–µ—Å–Ω–∏, —Ä–µ—à–∞—Ç—å —É–∂–µ —Ç–µ–±–µ!')
    await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–∞—Å—É', reply_markup=markup)


async def next_page_race(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    data = int(callback_data.get("page")) + 1

    if data > len(races) / 6 + 1:
        return

    button_list = []
    for i in range((data - 1) * 6, data * 6, 2):

        if i >= len(races):
            break

        button_list.append([InlineKeyboardButton(text=races[i], callback_data=character_creation_callback.new(
            action="race", race=races[i][:-2], clas="null")), InlineKeyboardButton(text=races[i + 1],
                                                                                   callback_data=character_creation_callback.new(
                                                                                       action="race",
                                                                                       race=races[i + 1][:-2],
                                                                                       clas="null"))])

    markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=button_list)
    markup.add(
        InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page=str(data), action="prev")),
        InlineKeyboardButton(text=str(data), callback_data="null"),
        InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page=str(data), action="next")),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=confirmation_callback.new(choice="cancel"))
    )

    await call.message.edit_reply_markup(markup)


async def prev_page_race(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    data = int(callback_data.get("page")) - 1

    if data < 1:
        return

    button_list = []
    for i in range((data - 1) * 6, data * 6, 2):

        if i >= len(races):
            break

        button_list.append([InlineKeyboardButton(text=races[i], callback_data=character_creation_callback.new(
            action="race", race=races[i][:-2], clas="null")), InlineKeyboardButton(text=races[i + 1],
                                                                                   callback_data=character_creation_callback.new(
                                                                                       action="race",
                                                                                       race=races[i + 1][:-2],
                                                                                       clas="null"))])

    markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=button_list)
    markup.add(
        InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page=str(data), action="prev")),
        InlineKeyboardButton(text=str(data), callback_data="null"),
        InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page=str(data), action="next")),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=confirmation_callback.new(choice="cancel"))
    )

    await call.message.edit_reply_markup(markup)


async def set_race(call: types.CallbackQuery, callback_data: dict, state=FSMContext):
    await call.answer()

    race = callback_data.get("race")
    async with state.proxy() as data:
        data['race'] = race
    await FSMCharacter.next()
    await call.message.edit_reply_markup(reply_markup=None)

    button_list = []
    for i in range(3):
        button_list.append([InlineKeyboardButton(text=classes[i], callback_data=character_creation_callback.new(
            action="clas", race="null", clas=classes[i][:-2]))])

    markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=button_list)
    markup.add(
        InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page="1", action="prev")),
        InlineKeyboardButton(text="1", callback_data="null"),
        InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page="1", action="next")),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=confirmation_callback.new(choice="cancel"))
    )

    await call.message.edit_text(f'{data["race"]} - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π –∫–ª–∞—Å—Å —Ç—ã'
                                 f' –≤—ã–±—Ä–∞–ª –¥–ª—è —Å–≤–æ–∏—Ö —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏–π')
    await call.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å!", reply_markup=markup)


async def next_page_class(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    data = int(callback_data.get("page")) + 1

    if data > len(classes) / 3 + 1:
        return

    button_list = []
    for i in range((data - 1) * 3, data * 3):

        if i >= len(classes):
            break

        button_list.append([InlineKeyboardButton(text=classes[i], callback_data=character_creation_callback.new(
            action="clas", race="null", clas=classes[i][:-2]))])

    markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=button_list)
    markup.add(
        InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page=str(data), action="prev")),
        InlineKeyboardButton(text=str(data), callback_data="null"),
        InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page=str(data), action="next")),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=confirmation_callback.new(choice="cancel"))
    )

    await call.message.edit_reply_markup(markup)


async def prev_page_class(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    data = int(callback_data.get("page")) - 1

    if data < 1:
        return

    button_list = []
    for i in range((data - 1) * 3, data * 3):

        if i >= len(classes):
            break

        button_list.append([InlineKeyboardButton(text=classes[i], callback_data=character_creation_callback.new(
            action="clas", race="null", clas=classes[i][:-2]))])

    markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=button_list)
    markup.add(
        InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page=str(data), action="prev")),
        InlineKeyboardButton(text=str(data), callback_data="null"),
        InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page=str(data), action="next")),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=confirmation_callback.new(choice="cancel"))
    )

    await call.message.edit_reply_markup(markup)


async def set_clas(call: types.CallbackQuery, callback_data: dict, state=FSMContext):
    await call.answer()
    clas = callback_data.get("clas")
    async with state.proxy() as data:
        data['clas'] = clas
    await FSMCharacter.next()
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.edit_text(
        f'–•–º–º, {data["clas"]}... –£ –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç–æ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è? –ü–æ–≤–µ–¥–∞–π –µ–µ –∏–ª–∏ –∂–µ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∫–∞–∑–∞–Ω–∏–π',
        reply_markup=cancel_menu)


async def set_origin(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['origin'] = message.text
    await FSMCharacter.next()
    await message.reply(f'–ò—Å—Ç–æ—Ä–∏—è –æ—Ç {data["origin"]} —è –µ—â–µ –Ω–µ —Å–ª—ã—Ö–∞–ª. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ç—ã —Å–º–æ–≥ –¥–æ—Å—Ç–∏—á—å?',
                        reply_markup=cancel_menu)


async def set_level(message: types.Message, state=FSMContext):
    try:
        async with state.proxy() as data:
            data['level'] = int(message.text)
        await FSMCharacter.next()
        await message.answer(f'–î–∞–π-–∫–∞ –∑–∞–ø–∏—à—É –æ —Ç–µ–±–µ –≤ —Å–≤–æ–µ–º –±–ª–æ–∫–Ω–æ—Ç–µ\n\n-------------------\n'
                             f'üîÖ –ü–µ—Ä—Å–æ–Ω–∞–∂: {data["name"]} (—É—Ä–æ–≤–µ–Ω—å: {data["level"]})\n'
                             f'üßë‚Äçü¶≥ –†–∞—Å–∞: {data["race"]}\nüßô –ö–ª–∞—Å—Å: {data["clas"]}\nüëº –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {data["origin"]}\n-------------------\n'
                             f'\n–ü—Ä–æ–≤–µ—Ä—å –º–µ–Ω—è, —è –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å–ª—ã—à–∞–ª?', reply_markup=confirmation_menu)
    except:
        await message.answer("–í–æ—Ç —ç—Ç–æ –¥–∞! –ù–µ –∑–Ω–∞—é, –∫–∞–∫ —É –≤–∞—Å, –Ω–æ —É –Ω–∞—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —á–∏—Å–ª–∞. "
                             "–ü–æ–ø—Ä–æ–±—É–π –¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞!")


async def save_character(call: types.CallbackQuery, state=FSMContext):
    await call.answer(cache_time=60)
    await db_insert(state)
    await state.finish()
    await call.message.answer("–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è –µ—é —Å–æ –º–Ω–æ–π!")
    await call.message.edit_reply_markup(reply_markup=None)


async def stop_creating_character(call: types.CallbackQuery, state=FSMContext):
    await state.finish()
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(
        "–í–∏–¥–∏–º–æ —Å–µ–π—á–∞—Å —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π... –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã"
        " –ø–æ—Å–ª—É—à–∞—Ç—å –æ —Ç–≤–æ–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö!", reply_markup=main_menu)


def register_character_creation(dp: Dispatcher):
    dp.register_message_handler(create_character, Text(equals='–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', ignore_case=True), state=None)
    dp.register_message_handler(stop_creating_character, Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', ignore_case=True),
                                state=FSMCharacter.all_states)
    dp.register_message_handler(set_name, state=FSMCharacter.name)
    # dp.register_message_handler(set_race, state=FSMCharacter.race)
    # dp.register_message_handler(set_clas, state=FSMCharacter.clas)
    dp.register_message_handler(set_origin, state=FSMCharacter.origin)
    dp.register_message_handler(set_level, state=FSMCharacter.level)

    dp.register_callback_query_handler(save_character, confirmation_callback.filter(choice="yes"),
                                       state=FSMCharacter.confirmation)
    dp.register_callback_query_handler(stop_creating_character, confirmation_callback.filter(choice="cancel"),
                                       state=FSMCharacter.all_states)

    dp.register_callback_query_handler(next_page_race, page_button_callback.filter(action="next"),
                                       state=FSMCharacter.race)
    dp.register_callback_query_handler(prev_page_race, page_button_callback.filter(action="prev"),
                                       state=FSMCharacter.race)
    dp.register_callback_query_handler(next_page_class, page_button_callback.filter(action="next"),
                                       state=FSMCharacter.clas)
    dp.register_callback_query_handler(prev_page_class, page_button_callback.filter(action="prev"),
                                       state=FSMCharacter.clas)
    dp.register_callback_query_handler(set_race, character_creation_callback.filter(action="race"),
                                       state=FSMCharacter.race)
    dp.register_callback_query_handler(set_clas, character_creation_callback.filter(action="clas"),
                                       state=FSMCharacter.clas)
