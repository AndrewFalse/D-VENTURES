from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.db_processing.character_processing import read_limited_characters_page
from database.db_processing.qualities_processing import get_total_qualities, get_qualities_info
from database.models.qualities_model import Quality
from telegram_bot.keyboards.callback_datas import character_settings_callback
from telegram_bot.keyboards.inline import get_settings_menu
from telegram_bot.misc.dice_throwing import throw_dice_20


async def calculate_qualities(call: types.CallbackQuery, callback_data: dict, state=FSMContext):
    await call.answer(cache_time=60)
    await call.message.edit_reply_markup(reply_markup=None)
    if get_total_qualities(callback_data.get("id")) > 0:
        record = get_qualities_info(callback_data.get("id"))
        print(callback_data.get("id"))
        text = f'–°–∏–ª–∞: {record[0][3]}\n–õ–æ–≤–∫–æ—Å—Ç—å: {record[0][4]}\n–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {record[0][5]}\n–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {record[0][6]}\n–ú—É–¥—Ä–æ—Å—Ç—å: {record[0][7]}\n–•–∞—Ä–∏–∑–º–∞: {record[0][8]}\n'
        await call.message.answer(text, reply_markup=InlineKeyboardMarkup(row_width=1, inline_keyboard=[[
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=character_settings_callback.new(setting="back",
                                                                                                id=callback_data.get(
                                                                                                    "id"),
                                                                                                num=callback_data.get(
                                                                                                    "num")))]]))
        return

    await call.message.answer("–î–æ–≤–µ—Ä–∏–º—Å—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é!")
    async with state.proxy() as data:
        data["force"] = await throw_dice_20(call.message)
    await call.message.answer("–ó–∞–ø–∏—à–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
    async with state.proxy() as data:
        data["agility"] = await throw_dice_20(call.message)
    await call.message.answer("–ê —ç—Ç–æ —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞ –ª–æ–≤–∫–æ—Å—Ç—å! –ü–µ—Ä–µ–π–¥–µ–º –∫ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—é.")
    async with state.proxy() as data:
        data["body"] = await throw_dice_20(call.message)
    await call.message.answer("–§–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω–æ! –ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞?")
    async with state.proxy() as data:
        data["intellect"] = await throw_dice_20(call.message)
    await call.message.answer("–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º—É–¥—Ä–æ—Å—Ç–∏.")
    async with state.proxy() as data:
        data["wisdom"] = await throw_dice_20(call.message)
    await call.message.answer("–û—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–∏–∑–º–∞!")
    async with state.proxy() as data:
        data["charisma"] = await throw_dice_20(call.message)
    async with state.proxy() as data:
        Quality.create(user_id=call.message.from_user.id, character_id=callback_data.get("id"), force=data["force"],
                       agility=data["agility"],
                       body=data["body"], intellect=data["intellect"], wisdom=data['wisdom'], charisma=data["charisma"])
    record = get_qualities_info(callback_data.get("id"))
    print(callback_data.get("id"))
    text = f'–°–∏–ª–∞: {record[0][3]}\n–õ–æ–≤–∫–æ—Å—Ç—å: {record[0][4]}\n–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {record[0][5]}\n–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {record[0][6]}\n–ú—É–¥—Ä–æ—Å—Ç—å: {record[0][7]}\n–•–∞—Ä–∏–∑–º–∞: {record[0][8]}\n'
    await call.message.answer(text, reply_markup=InlineKeyboardMarkup(row_width=1, inline_keyboard=[[
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                             callback_data=character_settings_callback.new(setting="back", id=callback_data.get("id"),
                                                                           num=callback_data.get("num")))]]))


async def page_return(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    await call.message.edit_reply_markup(reply_markup=None)
    records = read_limited_characters_page(call.from_user.id)
    i = int(callback_data.get("num"))
    text = f'üîÖ –ü–µ—Ä—Å–æ–Ω–∞–∂: {records[i][2]} (—É—Ä–æ–≤–µ–Ω—å: {records[i][6]})\n üßë‚Äçü¶≥ –†–∞—Å–∞: {records[i][3]}\n' \
           f'üßô –ö–ª–∞—Å—Å: {records[i][4]}\nüëº –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {records[i][5]}'
    await call.message.answer(text, reply_markup=get_settings_menu(records[i][0], i))


def register_qualities(dp: Dispatcher):
    dp.register_callback_query_handler(calculate_qualities, character_settings_callback.filter(setting="qualities"),
                                       state='*')
    dp.register_callback_query_handler(page_return, character_settings_callback.filter(setting="back"),
                                       state='*')
