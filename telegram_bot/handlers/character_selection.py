import sqlite3

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
import sqlite3 as sq

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from telegram_bot.keyboards.callback_datas import character_select_callback, page_button_callback


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü)
# TODO: –≤—ã–±–æ—Ä "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞" –¥–æ–ª–∂–µ–Ω —Ç–∞–∫–∂–µ –æ—Ç–º–µ–Ω—è—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ"
async def show_character_menu(message: types.Message):
    global markup
    records = read_limited_characters_page(message.from_user.id)
    characters_buttons = []
    for i in range(3):
        if i >= len(records):
            break
        text = f'{records[i][1]} ({records[i][3]} - {records[i][5]} —É—Ä–æ–≤–Ω—è)'
        characters_buttons.append([InlineKeyboardButton(text=text, callback_data=character_select_callback.new(
            id=i, action="read"
        ))])
        markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=characters_buttons)
        markup.add(
            InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page=str(1), action="prev_char")),
            InlineKeyboardButton(text=str(1), callback_data="null"),
            InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page=str(1), action="next_char")),
        )
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ">" - —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
# TODO: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–∏ —Ä–∞–∑–∞ –≤–ø–µ—Ä–µ–¥, –æ–¥–∏–Ω –Ω–∞–∑–∞–¥)
# TODO: —Ä–µ—à–∏—Ç—å –æ—à–∏–±–∫—É "Message is not modified: specified new message content and reply markup are exactly the same as
#  a current content and reply markup of the message"
async def show_next_character_page(call: types.CallbackQuery, callback_data: dict):
    global markup
    await call.answer()
    records = read_limited_characters_page(call.from_user.id)
    data = int(callback_data.get("page")) + 1
    if data > len(records) / 3 + 1:
        data = 1
    characters_buttons = []
    for i in range((data - 1) * 3, data * 3):
        if i >= len(records):
            break
        text = f'{records[i][1]} ({records[i][3]} - {records[i][5]} —É—Ä–æ–≤–Ω—è)'
        characters_buttons.append([InlineKeyboardButton(text=text, callback_data=character_select_callback.new(
            id=i, action="read"
        ))])
        markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=characters_buttons)
        markup.add(
            InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page=str(data), action="prev_char")),
            InlineKeyboardButton(text=str(data), callback_data="null"),
            InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page=str(data), action="next_char")),
        )
    await call.message.edit_reply_markup(reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "<" - –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
async def show_prev_character_page(call: types.CallbackQuery, callback_data: dict):
    global markup
    await call.answer()
    records = read_limited_characters_page(call.from_user.id)
    data = int(callback_data.get("page")) - 1
    if data < 1:
        data = int(len(records) / 3 + 1)
    characters_buttons = []
    for i in range((data - 1) * 3, data * 3):
        if i >= len(records):
            break
        text = f'{records[i][1]} ({records[i][3]} - {records[i][5]} —É—Ä–æ–≤–Ω—è)'
        characters_buttons.append([InlineKeyboardButton(text=text, callback_data=character_select_callback.new(
            id=i, action="read"
        ))])
        markup = InlineKeyboardMarkup(row_width=3, inline_keyboard=characters_buttons)
        markup.add(
            InlineKeyboardButton(text="<", callback_data=page_button_callback.new(page=str(data), action="prev_char")),
            InlineKeyboardButton(text=str(data), callback_data="null"),
            InlineKeyboardButton(text=">", callback_data=page_button_callback.new(page=str(data), action="next_char")),
        )
    await call.message.edit_reply_markup(reply_markup=markup)


async def show_selected_character_info(call: types.CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    await call.message.edit_reply_markup(reply_markup=None)
    records = read_limited_characters_page(call.from_user.id)
    i = int(callback_data.get("id"))
    text = f'üîÖ –ü–µ—Ä—Å–æ–Ω–∞–∂: {records[i][1]} (—É—Ä–æ–≤–µ–Ω—å: {records[i][5]})\n üßë‚Äçü¶≥ –†–∞—Å–∞: {records[i][2]}\n' \
           f'üßô –ö–ª–∞—Å—Å: {records[i][3]}\nüëº –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {records[i][4]}'
    await call.message.edit_text(text)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –∏–∑ –ë–î –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ user_id
def read_limited_characters_page(user_id):
    global base
    try:
        base = sq.connect('dnd.db')
        cursor = base.cursor()
        query = "SELECT * FROM Characters WHERE user_id = " + str(user_id)
        cursor.execute(query)
        record = cursor.fetchall()
        cursor.close()
        return record

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å SQLite ", error)
    finally:
        if base:
            base.close()


def register_character_selection(dp: Dispatcher):
    dp.register_message_handler(show_character_menu, Text(equals='–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', ignore_case=True), state='*')
    dp.register_callback_query_handler(show_next_character_page, page_button_callback.filter(action="next_char"))
    dp.register_callback_query_handler(show_prev_character_page, page_button_callback.filter(action="prev_char"))
    dp.register_callback_query_handler(show_selected_character_info, character_select_callback.filter(action="read"))
